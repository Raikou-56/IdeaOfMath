public async Task<IActionResult> Index()
    {
        List<Problem> problemsData = DataBaseSetup.GetProblems();

        var problems = new List<ProblemViewData> { };
        var studentId = User.FindFirst("StudentId")?.Value;
        if (string.IsNullOrEmpty(studentId))
        {
            // ログインしてない or Claimがない場合の処理
            foreach (var problem in problemsData)
            {
                var problemData = new ProblemViewData
                {
                    SerialNumber = problem.SerialNumber,
                    IdNumber = problem.IdNumber,
                    difficulty = problem.difficulty,
                    category = problem.category,
                    LatexSrc = problem.ProblemLatex,
                    UserData = false,
                    Teacher = problem.Teacher
                };
                problems.Add(problemData);
            }
            return View(problems);
        }
        var AnswerHistories = DataBaseSetup.answerHistoryCollection();
        var historyList = await _answerHistoryRepo.GetHistoryByStudentIdAsync(studentId);
        var solvedIds = historyList.Select(h => h.ProblemId).ToHashSet();

        foreach (var problem in problemsData)
        {
            var problemData = new ProblemViewData
            {
                SerialNumber = problem.SerialNumber,
                IdNumber = problem.IdNumber,
                difficulty = problem.difficulty,
                category = problem.category,
                LatexSrc = problem.ProblemLatex,
                UserData = solvedIds.Contains(problem.SerialNumber.ToString()),
                Score = historyList
                            .Where(h => h.ProblemId == problem.SerialNumber.ToString() && h.Scoring)
                            .OrderByDescending(h => h.Score)
                            .FirstOrDefault()?.Score.ToString() ?? "未採点",
                Teacher = problem.Teacher,
                Scoring = HasUnscoredAnswers(problem.SerialNumber.ToString())
            };
            problems.Add(problemData);
        }
        return View(problems);
    }